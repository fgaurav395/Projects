hist(Rejected$Risk_Score,col = 'blue',density = 10,xlab = 'Risk Score',main = 'Risk Score')
hist(df,main='Distribution of Interest Rate',col='red',density=10,xlab='Interest Rate',nclass=7)
ggplot(LoanStats$emp_length)+geom_bar()
barplot(LoanStats$emp_length)
barplot(LoanStats$emp_length,height = 1)
barplot(LoanStats$emp_length,height = 5)
barplot(LoanStats$emp_length,height = 7)
ggplot(LoanStats)+geom_histogram(aes(x=LoanStats$emp_length[LoanStats$emp_length!='n/a']))
ggplot(LoanStats)+geom_histogram(aes(x=LoanStats$emp_length[LoanStats$emp_length!='n/a'],stat = 'count'))
LoanStats$emp_length[LoanStats$emp_length!='n/a']
plot(LoanStats$emp_length[LoanStats$emp_length!='n/a'])
BARplot(LoanStats$emp_length[LoanStats$emp_length!='n/a'])
barplot(LoanStats$emp_length[LoanStats$emp_length!='n/a'])
barplot(as.character(LoanStats$emp_length[LoanStats$emp_length!='n/a']))
plot(as.character(LoanStats$emp_length[LoanStats$emp_length!='n/a']))
ggplot(LoanStats)+geom_histogram(aes(x=LoanStats$emp_length[LoanStats$emp_length!='n/a']))
ggplot(LoanStats)+geom_histogram()
ggplot(LoanStats)+geom_histogram()+aes(x=LoanStats$emp_length[LoanStats$emp_length!='n/a'])
ggplot(LoanStats)+geom_histogram()+aes(x=emp_length[emp_length!='n/a'])
ggplot(LoanStats)+aes(x=emp_length[emp_length!='n/a'])+geom_histogram()
ggplot(LoanStats)+aes(x=emp_length[emp_length!='n/a'])+geom_bar()
ggplot(LoanStats,aes(emp_length[emp_length!='n/a'])+geom_bar()
p
ggplot(LoanStats,aes(emp_length[emp_length!='n/a']))+geom_bar()
LoanStats$emp_length[LoanStats$emp_length!='n/a']
ggplot(LoanStats,aes(as.character(emp_length[emp_length!='n/a']))+geom_bar()
a
ggplot(LoanStats,aes(as.character(emp_length[emp_length!='n/a'])))+geom_bar()
ggplot(LoanStats,aes(emp_length))+geom_bar()
a
ggplot(LoanStats,aes(emp_length))+geom_bar()
ggplot(LoanStats,aes(emp_length))+geom_bar(fill='re')
ggplot(LoanStats,aes(emp_length))+geom_bar(fill='red')
ggplot(LoanStats,aes(emp_length))+geom_bar(fill='green')
ggplot(LoanStats,aes(emp_length))+geom_bar(fill='dark green')
ggplot(LoanStats,aes(emp_length))+geom_bar(fill='dark green',binwidth = 1)
ggplot(LoanStats,aes(emp_length))+geom_bar(fill='dark green')+coord_flip()
ggplot(LoanStats,aes(emp_length))+geom_bar(fill='dark green')+coord_flip()
ggplot(LoanStats,aes(emp_length))+geom_bar(fill='dark green')+coord_flip()+coord_flip()
ggplot(LoanStats,aes(emp_length))+geom_bar(fill='dark green',xlab('Employment Length'))+coord_flip()
ggplot(LoanStats,aes(emp_length,xlab('Employment Length')))+geom_bar(fill='dark green')+coord_flip()
con<-read.csv("concrete(1).csv")
str(con)
install.packages("class")
library(class)
con.test<-con[1:730.]
con.test<-con[1:730,]
con.train<-con[1:730,]
con.test<-con[731::,]
con.test<-con[731:,]
con.test<-con[731:1030,]
model.knn<-knn(con.train,con.test,k=5)
con.test[9]
model.knn<-knn(con.train,con.test,k=5,cl=con.test[9])
model.knn<-knn(con.train,con.test,k=5,cl=con.train[9])
model.knn<-knn(con.train[-9],con.test[-9],k=5,cl=con.train[9])
model.knn<-knn(con.train[-9],test=con.test[-9],k=5,cl=con.train[9])
model.knn<-knn(con.train[-9],test=con.test[-9],k=5,cl=con.train[,9])
model.knn.pred
model.knn
as.numericmodel.knn
as.numeric(model.knn)
toy<-read.csv("18 Toyota Corolla(1).xlsx")
str(toy)
toy<-read.csv("Toyota Corolla(1).xlsx")
toy<-read.csv("18 Toyota Corolla(1).xlsx")
toy<-readxl::read_xlsx("18 Toyota Corolla(1).xlsx")
str(toy)
colnames(toy)
toy[3]
toy.train<-toy[1:1000,]
toy.test<-toy[1001:1436,]
library(neuralnet)
toy.nn<-neuralnet(Price~.,data = toy.train)
toy.nn<-neuralnet(Price~,data = toy.train,threshold = 0.01)
n<-names(toy.train)
f <- as.formula(paste("medv ~", paste(n[!n %in% "medv"], collapse = " + ")))
f
toy.nn<-neuralnet(Price~,data = toy.train,threshold = 0.01)
f <- as.formula(paste("Price ~", paste(n[!n %in% "medv"], collapse = " + ")))
f
f <- as.formula(paste("Price ~", paste(n[!n %in% "Price"], collapse = " + ")))
toy.nn<-neuralnet(f,data = toy.train,threshold = 0.01)
f
toy.nn<-neuralnet(f,data = toy.train)
toy.nn<-neuralnet(f,data = toy.train)
str(toy.train)
toy$Fuel_Type<-as.factor(toy$Fuel_Type)
toy$Color<-as.factor(toy$Color)
toy.train<-toy[1:1000,]
toy.test<-toy[1001:1436,]
library(neuralnet)
n<-names(toy.train)
f <- as.formula(paste("Price ~", paste(n[!n %in% c("Price","Model"], collapse = " + ")))
f <- as.formula(paste("Price ~", paste(n[!n %in% c("Price","Model")], collapse = " + ")))
f
toy.nn<-neuralnet(f,data = toy.train)
toy.nn<-neuralnet(Price~Id,data = toy.train)
toy.nn<-neuralnet(Price~Id+ Age_08_04 + Mfg_Month + Mfg_Year + KM + Fuel_Type +
HP + Met_Color + Color + Automatic + cc + Doors + Cylinders +
Gears + Quarterly_Tax + Weight + Mfr_Guarantee + BOVAG_Guarantee +
Guarantee_Period + ABS + Airbag_1 + Airbag_2 + Airco + Automatic_airco +
Boardcomputer + CD_Player + Central_Lock + Powered_Windows +
Power_Steering + Radio + Mistlamps + Sport_Model + Backseat_Divider +
Metallic_Rim + Radio_cassette + Tow_Bar,data = toy.train)
toy.nn<-neuralnet(Price~Id+ Age_08_04 + Mfg_Month + Mfg_Year + KM + Fuel_Type +
HP + Met_Color + Color + Automatic + cc + Doors + Cylinders +
Gears + Quarterly_Tax + Weight + Mfr_Guarantee + BOVAG_Guarantee +
Guarantee_Period,data = toy.train)
toy.nn<-neuralnet(Price~Id+ Age_08_04 + Mfg_Month + Mfg_Year + KM + Fuel_Type +
HP + Met_Color + Color ,data = toy.train)
toy.nn<-neuralnet(Price~Id+ Age_08_04 + Mfg_Month + Mfg_Year + KM + Fuel_Type +
HP + Met_Color  + Automatic + cc + Doors + Cylinders +
Gears + Quarterly_Tax + Weight + Mfr_Guarantee + BOVAG_Guarantee +
Guarantee_Period + ABS + Airbag_1 + Airbag_2 + Airco + Automatic_airco +
Boardcomputer + CD_Player + Central_Lock + Powered_Windows +
Power_Steering + Radio + Mistlamps + Sport_Model + Backseat_Divider +
Metallic_Rim + Radio_cassette + Tow_Bar,data = toy.train)
toy.nn<-neuralnet(Price~ Met_Color + Color + Automatic + cc + Doors + Cylinders +
Gears + Quarterly_Tax + Weight + Mfr_Guarantee + BOVAG_Guarantee +
Guarantee_Period + ABS + Airbag_1 + Airbag_2 + Airco + Automatic_airco +
Boardcomputer + CD_Player + Central_Lock + Powered_Windows +
Power_Steering + Radio + Mistlamps + Sport_Model + Backseat_Divider +
Metallic_Rim + Radio_cassette + Tow_Bar,data = toy.train)
toy.nn<-neuralnet(Price ~ Id+ Age_08_04 + Mfg_Month + Mfg_Year + KM + Fuel_Type +
HP + Met_Color + Color + Automatic + cc + Doors + Cylinders +
Gears + Quarterly_Tax + Weight + Mfr_Guarantee + BOVAG_Guarantee +
Guarantee_Period + ABS + Airbag_1 + Airbag_2 + Airco + Automatic_airco +
Boardcomputer + CD_Player + Central_Lock + Powered_Windows +
Power_Steering + Radio + Mistlamps + Sport_Model + Backseat_Divider +
Metallic_Rim + Radio_cassette + Tow_Bar,data = toy.train)
toy.nn<-neuralnet(Price ~ Id+ Age_08_04 + Mfg_Month ,data = toy.train)
toy.nn<-neuralnet(Price ~ Id+ Age_08_04 + Mfg_Month + Mfg_Year ,data = toy.train)
toy.nn<-neuralnet(Price ~ Id+ Age_08_04 + Mfg_Month + Mfg_Year + KM + Fuel_Type ,data = toy.train)
toy.nn<-neuralnet(Price ~ Id+ Age_08_04 + Mfg_Month + Mfg_Year + KM ,data = toy.train)
toy.nn<-neuralnet(Price ~ Id+ Age_08_04 + Mfg_Month + Mfg_Year + KM +
HP + Met_Color + Color + Automatic + cc + Doors + Cylinders +
Gears + Quarterly_Tax + Weight + Mfr_Guarantee + BOVAG_Guarantee +
Guarantee_Period + ABS + Airbag_1 + Airbag_2 + Airco + Automatic_airco +
Boardcomputer + CD_Player + Central_Lock + Powered_Windows +
Power_Steering + Radio + Mistlamps + Sport_Model + Backseat_Divider +
Metallic_Rim + Radio_cassette + Tow_Bar,data = toy.train)
toy.nn<-neuralnet(Price ~ Id+ Age_08_04 + Mfg_Month + Mfg_Year + Fuel_Type +
HP + Met_Color + Color + Automatic + cc + Doors + Cylinders +
Gears + Quarterly_Tax + Weight + Mfr_Guarantee + BOVAG_Guarantee +
Guarantee_Period + ABS + Airbag_1 + Airbag_2 + Airco + Automatic_airco +
Boardcomputer + CD_Player + Central_Lock + Powered_Windows +
Power_Steering + Radio + Mistlamps + Sport_Model + Backseat_Divider +
Metallic_Rim + Radio_cassette + Tow_Bar,data = toy.train)
toy.nn<-neuralnet(Price ~ Id+ Age_08_04 + Mfg_Month + Mfg_Year + KM ,data = toy.train)
toy.nn<-neuralnet(Price ~ Id+ Age_08_04 + Mfg_Month + Mfg_Year + KM + Fuel_Type ,data = toy.train)
toy<-readxl::read_xlsx("18 Toyota Corolla(1).xlsx")
toy.nn<-neuralnet(Price ~ Id+ Age_08_04 + Mfg_Month + Mfg_Year + KM +                     ,data = toy.train)
toy.nn<-neuralnet(Price ~ Id+ Age_08_04 + Mfg_Month + Mfg_Year + KM ,data = toy.train)
toy.nn<-neuralnet(Price ~ Id+ Age_08_04 + Mfg_Month + Mfg_Year + KM
HP ,data = toy.train)
toy.nn<-neuralnet(Price ~ Id+ Age_08_04 + Mfg_Month + Mfg_Year + KM
+ HP ,data = toy.train)
toy.nn<-neuralnet(Price ~ Id+ Age_08_04 + Mfg_Month + Mfg_Year + KM +
HP + Met_Color + Color ,data = toy.train)
toy.nn<-neuralnet(Price ~ Id+ Age_08_04 + Mfg_Month + Mfg_Year + KM +
HP + Met_Color+ Automatic + cc + Doors + Cylinders +
Gears + Quarterly_Tax + Weight + Mfr_Guarantee + BOVAG_Guarantee +
Guarantee_Period + ABS + Airbag_1 + Airbag_2 + Airco + Automatic_airco +
Boardcomputer + CD_Player + Central_Lock + Powered_Windows +
Power_Steering + Radio + Mistlamps + Sport_Model + Backseat_Divider +
Metallic_Rim + Radio_cassette + Tow_Bar,data = toy.train)
f <- as.formula(paste("Price ~", paste(n[!n %in% c("Price","Model","Color","Fuel_type")], collapse = " + ")))
toy.nn<-neuralnet(Price ~ Id+ Age_08_04 + Mfg_Month + Mfg_Year + KM +
HP + Met_Color+ Automatic + cc + Doors + Cylinders +
Gears + Quarterly_Tax + Weight + Mfr_Guarantee + BOVAG_Guarantee +
Guarantee_Period + ABS + Airbag_1 + Airbag_2 + Airco + Automatic_airco +
Boardcomputer + CD_Player + Central_Lock + Powered_Windows +
Power_Steering + Radio + Mistlamps + Sport_Model + Backseat_Divider +
Metallic_Rim + Radio_cassette + Tow_Bar,data = toy.train)
toy.nn<-neuralnet(f,data = toy.train)
toy.nn<-neuralnet(f,data = toy.train,algorithm = "rprop+")
f <- as.formula(paste("Price ~", paste(n[!n %in% c("Price","Model","Color","Fuel_Type")], collapse = " + ")))
toy.nn<-neuralnet(f,data = toy.train,algorithm = "rprop+")
plot(toy.nn)
toy.nn<-neuralnet(f,data = toy.train,algorithm = "rprop+",hidden = 3)
toy.nn<-neuralnet(f,data = toy.train,algorithm = "rprop+",threshold = 1)
pred<-predict(toy.nn)
pred<-compute(toy.nn,toy.test)
toy.nn<-neuralnet(f,data = toy.train,algorithm = "rprop+",threshold = 0.1)
toy.nn<-neuralnet(f,data = toy.train,algorithm = "rprop+",threshold = 0.01)
toy.nn<-neuralnet(f,data = toy.train,algorithm = "rprop+",threshold = 0.001)
toy.nn$response
summary(toy.nn)
pred<-compute(toy.nn,toy.train)
toy.nn<-neuralnet(f,data = toy.train,algorithm = "rprop+")
pred<-compute(toy.nn,toy.train)
toy<-toy[-Model]
toy
colnames(toy)
toy<-toy[-2,-8,-11]
toy<-toy[c(-2,-8,-11),]
toy
colnames(toy)
toy.train<-toy[1:1000,]
toy.test<-toy[1001:1436,]
library(neuralnet)
n<-names(toy.train)
f <- as.formula(paste("Price ~", paste(n[!n %in% Price], collapse = " + ")))
toy.nn<-neuralnet(f,data = toy.train,algorithm = "rprop+")
f <- as.formula(paste("Price ~", paste(n[!n %in% "Price"], collapse = " + ")))
toy.nn<-neuralnet(f,data = toy.train,algorithm = "rprop+")
toy<-readxl::read_xlsx("18 Toyota Corolla(1).xlsx")
toy.train<-toy[1:1000,]
toy<-toy[c(-2,-8,-11),]
toy.test<-toy[1001:1436,]
library(neuralnet)
n<-names(toy.train)
f <- as.formula(paste("Price ~", paste(n[!n %in% "Price"], collapse = " + ")))
toy.nn<-neuralnet(f,data = toy.train,algorithm = "rprop+")
names(toy.train)
toy<-readxl::read_xlsx("18 Toyota Corolla(1).xlsx")
toy<-toy[c(-2,-8,-11),]
toy1<-toy[c(-2,-8,-11),]
toy.train<-toy1[1:1000,]
toy.test<-toy1[1001:1436,]
library(neuralnet)
n<-names(toy.train)
f <- as.formula(paste("Price ~", paste(n[!n %in% "Price"], collapse = " + ")))
toy.nn<-neuralnet(f,data = toy.train,algorithm = "rprop+")
names(toy.train)
toy<-readxl::read_xlsx("18 Toyota Corolla(1).xlsx")
toy1<-toy[c(-2,-8,-11),]
colnames(toy1)
toy1<-toy[,c(-2,-8,-11)]
toy.train<-toy1[1:1000,]
toy.test<-toy1[1001:1436,]
colnames(toy1)
toy<-readxl::read_xlsx("18 Toyota Corolla(1).xlsx")
toy1<-toy[,c(-2,-8,-11)]
toy.train<-toy1[1:1000,]
toy.test<-toy1[1001:1436,]
library(neuralnet)
n<-names(toy.train)
f <- as.formula(paste("Price ~", paste(n[!n %in% "Price"], collapse = " + ")))
toy.nn<-neuralnet(f,data = toy.train,algorithm = "rprop+")
toy.nn<-neuralnet(f,data = toy.train,algorithm = "rprop+",stepmax = 10)
toy.nn<-neuralnet(f,data = toy.train,algorithm = "rprop+",stepmax = 10e10)
toy.nn<-neuralnet(f,data = toy.train,algorithm = "rprop+",stepmax = 10e4)
toy.nn<-neuralnet(f,data = toy.train,algorithm = "rprop+",stepmax = 10e6)
plot(toy.nn)
pred<-compute(toy.nn,toy.train)
pred<-compute(toy.nn,toy.test)
toy.nn<-neuralnet(f,data = toy.train,algorithm = "rprop+",hidden=c(5,3),stepmax = 10e6)
plot(toy.nn)
pred<-compute(toy.nn,toy.test)
nrow(LoanStats.step2.A)
nrow(LoanStats.step2.B)
nrow(LoanStats.step2.C)
nrow(LoanStats.step2.D)
library(tidyverse)
library(stringr)
library(caTools)
library(randomForest)
library(forecast)
library(neuralnet)
library(caret)
library(ggplot2)
library(corrplot)
setwd("C:/Users/Gaurav Korgaonkar/Desktop/Project")
### Data Cleaning
##LOAN STATS
L1<-read.csv("LoanStats_securev1_2016Q1.csv",skip=1)
L2<-read.csv("Q2.csv")
L3<-read.csv("LoanStats_securev1_2016Q3.csv",skip=1)
L4<-read.csv("LoanStats_securev1_2016Q4.csv",skip=1)
LoanStats<-rbind(L1,L2,L3,L4)
LoanStats<-LoanStats[LoanStats$fico_range_low > 660,]
LoanStats$risk_score<- (LoanStats$fico_range_low + LoanStats$fico_range_high) / 2
LoanStats$term<-as.integer(LoanStats$term %>% str_replace(' 36 months','36') %>% str_replace(' 60 months','60'))
LoanStats$int_rate<- as.double(str_replace(LoanStats$int_rate,'%',''))
LoanStats$status<-1
LoanStats$emp_length<-gsub('\\+','',LoanStats$emp_length)
LoanStats$emp_length<-as.integer( LoanStats$emp_length %>%   str_replace(' years','') %>%  str_replace('< 1 year','0') %>%   str_replace(' year','') )
LoanStats.step1<-LoanStats[,c('loan_amnt', 'purpose', 'risk_score', 'dti', 'addr_state', 'emp_length','status')]
LoanStats.step1<-LoanStats.step1[complete.cases(LoanStats.step1),]
head(LoanStats.step1)
##REJECTED
R1<-read.csv("RejectStats_2016Q1.csv",skip = 1)
R2<-read.csv("RejectStats_2016Q1.csv",skip = 1)
R3<-read.csv("RejectStats_2016Q1.csv",skip = 1)
R4<-read.csv("RejectStats_2016Q1.csv",skip = 1)
RejectStats<-rbind(R1,R2,R3,R4)
colnames(RejectStats)<-c('loan_amnt','date' ,'purpose', 'risk_score', 'dti', 'zip_code', 'addr_state', 'emp_length', 'policy_code')
RejectStats<- RejectStats[,c('loan_amnt', 'purpose', 'risk_score', 'dti', 'addr_state', 'emp_length')]
RejectStats$status<- 0
RejectStats$emp_length<-gsub('\\+','',RejectStats$emp_length)
RejectStats$emp_length<-as.integer( RejectStats$emp_length %>% str_replace(' years','') %>% str_replace('< 1 year','0') %>%                                   str_replace(' year','') )
RejectStats$dti<- as.double(str_replace(RejectStats$dti,'%',''))
RejectStats<-RejectStats[complete.cases(RejectStats),]
head(RejectStats)
#Step 2
#Manual clustering
LoanStats.step2<-LoanStats[,c('risk_score', 'loan_amnt', 'term', 'purpose', 'addr_state', 'debt_settlement_flag', 'dti', 'annual_inc','grade' ,'sub_grade', 'int_rate')]
LoanStats.step2<-LoanStats.step2[complete.cases(LoanStats.step2),]
LoanStats.step2<-LoanStats.step2[LoanStats.step2$int_rate<=25,]
LoanStats.step2<-LoanStats.step2[LoanStats.step2$loan_amnt<=38000,]
LoanStats.step2.A<-LoanStats.step2[LoanStats.step2$grade=='A',]
LoanStats.step2.B<-LoanStats.step2[LoanStats.step2$grade=='B',]
LoanStats.step2.C<-LoanStats.step2[LoanStats.step2$grade=='C',]
LoanStats.step2.D<-LoanStats.step2[LoanStats.step2$grade=='D',]
LoanStats.step2.E<-LoanStats.step2[LoanStats.step2$grade=='E',]
LoanStats.step2.F<-LoanStats.step2[LoanStats.step2$grade=='F',]
LoanStats.step2.G<-LoanStats.step2[LoanStats.step2$grade=='G',]
nrow(LoanStats.step2.A)
nrow(LoanStats.step2.B)
nrow(LoanStats.step2.C)
nrow(LoanStats.step2.D)
nrow(LoanStats.step2.E)
nrow(LoanStats.step2.F)
nrow(LoanStats.step2.G)
names(LoanStats.step1)
barplot(table(LoanStats$purpose),col='red',main = 'Distribution of grade',xlab = 'Grade')
plot(LoanStats$loan_amnt,LoanStats$emp_length)
plot(LoanStats.step2$int_rate,LoanStats.step2$dti)
plot(LoanStats.step2$int_rate,LoanStats.step1$dti)
plot(LoanStats.step1$int_rate,LoanStats.step1$dti)
plot(LoanStats.step2$int_rate,LoanStats.step2$loan_amnt)
results.lm<-predict(step2.model,newdata = step2.test)
accuracy(results.lm,step2.test$int_rate)
#Step 2
#Manual clustering
LoanStats.step2<-LoanStats[,c('risk_score', 'loan_amnt', 'term', 'purpose', 'addr_state', 'debt_settlement_flag', 'dti', 'annual_inc','grade' ,'sub_grade', 'int_rate')]
LoanStats.step2<-LoanStats.step2[complete.cases(LoanStats.step2),]
head(LoanStats.step2)
LoanStats.step2<-LoanStats.step2[LoanStats.step2$loan_amnt<=38000,]
boxplot(LoanStats.step2$int_rate)
unique(LoanStats.step2$grade)
nrow(LoanStats.step2.A)
LoanStats.step2.B<-LoanStats.step2[LoanStats.step2$grade=='B',]
nrow(LoanStats.step2.B)
nrow(LoanStats.step2.C)
LoanStats.step2.D<-LoanStats.step2[LoanStats.step2$grade=='D',]
nrow(LoanStats.step2.D)
LoanStats.step2.E<-LoanStats.step2[LoanStats.step2$grade=='E',]
nrow(LoanStats.step2.E)
LoanStats.step2.C<-LoanStats.step2[LoanStats.step2$grade=='C',]
LoanStats.step2.F<-LoanStats.step2[LoanStats.step2$grade=='F',]
LoanStats.step2<-LoanStats.step2[LoanStats.step2$int_rate<=25,]
nrow(LoanStats.step2.F)
LoanStats.step2.A<-LoanStats.step2[LoanStats.step2$grade=='A',]
LoanStats.step2.G<-LoanStats.step2[LoanStats.step2$grade=='G',]
# Interest rate prediction
#Cluster A
#Linear
set.seed(101)
sample = sample.split(LoanStats.step2.A$int_rate, SplitRatio = .75)
step2.train = subset(LoanStats.step2.A, sample == T)
step2.test  = subset(LoanStats.step2.A, sample == F)
step2.model<-lm(int_rate ~risk_score+ loan_amnt + term     +       purpose +addr_state +dti +annual_inc+sub_grade,family = "binomial",data=step2.train)
results.lm<-predict(step2.model,newdata = step2.test)
accuracy(results.lm,step2.test$int_rate)
plot(results.lm,step2.test$int_rate)
# Interest rate prediction
#Cluster A
#Linear
set.seed(101)
sample = sample.split(LoanStats.step2.A$int_rate, SplitRatio = .75)
step2.train = subset(LoanStats.step2.A, sample == T)
step2.test  = subset(LoanStats.step2.A, sample == F)
step2.model<-lm(int_rate ~risk_score+ loan_amnt + term     +       purpose +addr_state +dti +annual_inc+sub_grade,family = "binomial",data=step2.train)
results.lm<-predict(step2.model,newdata = step2.test)
accuracy(results.lm,step2.test$int_rate)
## RF
rf2.model<-randomForest(int_rate ~risk_score+ loan_amnt + term     +       purpose +addr_state +dti +annual_inc+sub_grade,data=step2.train,
importance=TRUE,
ntree=2)
results.rf<-predict(rf2.model,step2.test)
accuracy(results.rf,step2.test$int_rate)
#Cluster B
#Linear
set.seed(101)
sample = sample.split(LoanStats.step2.B$int_rate, SplitRatio = .75)
step2.train = subset(LoanStats.step2.B, sample == T)
step2.test  = subset(LoanStats.step2.B, sample == F)
step2.model<-lm(int_rate ~risk_score+ loan_amnt + term+dti +annual_inc+sub_grade,data=step2.train)
summary(step2.model)
results.lm<-predict(step2.model,newdata = step2.test)
accuracy(results.lm,step2.test$int_rate)
## RF
rf2.model<-randomForest(int_rate ~risk_score+ loan_amnt + term+dti +annual_inc+sub_grade,data=step2.train,
importance=TRUE,
ntree=2)
results.rf<-predict(rf2.model,step2.test)
accuracy(results.rf,step2.test$int_rate)
#Cluster C
#Linear
set.seed(101)
sample = sample.split(LoanStats.step2.C$int_rate, SplitRatio = .75)
step2.train = subset(LoanStats.step2.C, sample == T)
step2.test  = subset(LoanStats.step2.C, sample == F)
step2.model<-lm(int_rate ~risk_score+ loan_amnt + term+dti +annual_inc+sub_grade,data=step2.train)
summary(step2.model)
results.lm<-predict(step2.model,newdata = step2.test)
accuracy(results.lm,step2.test$int_rate)
## RF
rf2.model<-randomForest(int_rate ~risk_score+ loan_amnt + term+dti +annual_inc+sub_grade,data=step2.train,
importance=TRUE,
ntree=2)
results.rf<-predict(rf2.model,step2.test)
accuracy(results.rf,step2.test$int_rate)
#Cluster D
#Linear
set.seed(101)
sample = sample.split(LoanStats.step2.D$int_rate, SplitRatio = .75)
step2.train = subset(LoanStats.step2.D, sample == T)
step2.test  = subset(LoanStats.step2.D, sample == F)
step2.model<-lm(int_rate ~risk_score+ loan_amnt + term+dti +annual_inc+sub_grade,data=step2.train)
summary(step2.model)
results.lm<-predict(step2.model,newdata = step2.test)
accuracy(results.lm,step2.test$int_rate)
## RF
rf2.model<-randomForest(int_rate ~risk_score+ loan_amnt + term+dti +annual_inc+sub_grade,data=step2.train,
importance=TRUE,
ntree=2)
results.rf<-predict(rf2.model,step2.test)
accuracy(results.rf,step2.test$int_rate)
#Cluster E
#Linear
set.seed(101)
sample = sample.split(LoanStats.step2.E$int_rate, SplitRatio = .75)
step2.train = subset(LoanStats.step2.E, sample == T)
step2.test  = subset(LoanStats.step2.E, sample == F)
step2.model<-lm(int_rate ~risk_score+ loan_amnt + term+dti +annual_inc+sub_grade,data=step2.train)
summary(step2.model)
results.lm<-predict(step2.model,newdata = step2.test)
accuracy(results.lm,step2.test$int_rate)
## RF
rf2.model<-randomForest(int_rate ~risk_score+ loan_amnt + term+dti +annual_inc+sub_grade,data=step2.train,
importance=TRUE,
ntree=2)
results.rf<-predict(rf2.model,step2.test)
accuracy(results.rf,step2.test$int_rate)
#Cluster F
#Linear
set.seed(101)
sample = sample.split(LoanStats.step2.F$int_rate, SplitRatio = .75)
step2.train = subset(LoanStats.step2.F, sample == T)
step2.test  = subset(LoanStats.step2.F, sample == F)
step2.model<-lm(int_rate ~risk_score+ loan_amnt + term+dti +annual_inc+sub_grade,data=step2.train)
summary(step2.model)
results.lm<-predict(step2.model,newdata = step2.test)
accuracy(results.lm,step2.test$int_rate)
## RF
rf2.model<-randomForest(int_rate ~risk_score+ loan_amnt + term+dti +annual_inc+sub_grade,data=step2.train,
importance=TRUE,
ntree=2)
results.rf<-predict(rf2.model,step2.test)
accuracy(results.rf,step2.test$int_rate)
#Cluster G
#Linear
set.seed(101)
sample = sample.split(LoanStats.step2.G$int_rate, SplitRatio = .75)
step2.train = subset(LoanStats.step2.G, sample == T)
step2.test  = subset(LoanStats.step2.G, sample == F)
step2.model<-lm(int_rate ~risk_score+ loan_amnt + term+dti +annual_inc+sub_grade,data=step2.train)
summary(step2.model)
results.lm<-predict(step2.model,newdata = step2.test)
accuracy(results.lm,step2.test$int_rate)
library(gains)
# Interest rate prediction
#Cluster A
#Linear
set.seed(101)
sample = sample.split(LoanStats.step2.A$int_rate, SplitRatio = .75)
step2.train = subset(LoanStats.step2.A, sample == T)
step2.test  = subset(LoanStats.step2.A, sample == F)
step2.model<-lm(int_rate ~risk_score+ loan_amnt + term     +       purpose +addr_state +dti +annual_inc+sub_grade,family = "binomial",data=step2.train)
results.lm<-predict(step2.model,newdata = step2.test)
gain <- gains(step2.test$int_rate, results.lm, groups=10)
# plot lift chart
plot(c(0,gain$cume.pct.of.total*sum(step2.test$int_rate))~c(0,gain$cume.obs),
xlab="# cases", ylab="Cumulative", main="", type="l")
lines(c(0,sum(step2.test$int_rate))~c(0, dim(step2.test)[1]), lty=2)
# compute deciles and plot decile-wise chart
heights <- gain$mean.resp/mean(step2.test$int_rate)
midpoints <- barplot(heights, names.arg = gain$depth, ylim = c(0,9),
xlab = "Percentile", ylab = "Mean Response", main = "Decile-wise lift chart")
#Cluster B
#Linear
set.seed(101)
sample = sample.split(LoanStats.step2.B$int_rate, SplitRatio = .75)
step2.train = subset(LoanStats.step2.B, sample == T)
step2.test  = subset(LoanStats.step2.B, sample == F)
step2.model<-lm(int_rate ~risk_score+ loan_amnt + term+dti +annual_inc+sub_grade,data=step2.train)
summary(step2.model)
results.lm<-predict(step2.model,newdata = step2.test)
accuracy(results.lm,step2.test$int_rate)
gain <- gains(step2.test$int_rate, results.lm, groups=10)
# plot lift chart
plot(c(0,gain$cume.pct.of.total*sum(step2.test$int_rate))~c(0,gain$cume.obs),
xlab="# cases", ylab="Cumulative", main="", type="l")
lines(c(0,sum(step2.test$int_rate))~c(0, dim(step2.test)[1]), lty=2)
# compute deciles and plot decile-wise chart
heights <- gain$mean.resp/mean(step2.test$int_rate)
midpoints <- barplot(heights, names.arg = gain$depth, ylim = c(0,9),
xlab = "Percentile", ylab = "Mean Response", main = "Decile-wise lift chart")
midpoints <- barplot(heights, names.arg = gain$depth, ylim = c(0,2),
xlab = "Percentile", ylab = "Mean Response", main = "Decile-wise lift chart")
midpoints <- barplot(heights, names.arg = gain$depth, ylim = c(0,1.5),
xlab = "Percentile", ylab = "Mean Response", main = "Decile-wise lift chart")
midpoints <- barplot(heights, names.arg = gain$depth, ylim = c(0,1),
xlab = "Percentile", ylab = "Mean Response", main = "Decile-wise lift chart")
midpoints <- barplot(heights, names.arg = gain$depth, ylim = c(0,2),
xlab = "Percentile", ylab = "Mean Response", main = "Decile-wise lift chart")
midpoints <- barplot(heights, names.arg = gain$depth, ylim = c(0,1.2),
xlab = "Percentile", ylab = "Mean Response", main = "Decile-wise lift chart")
